# Generated by Django 4.2.1 on 2023-05-26 08:39

import django.core.validators
from django.db import migrations, models
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("update_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(default="", max_length=200)),
                ("type", models.CharField(default="", max_length=20)),
                ("sku", models.CharField(default="", max_length=200)),
                ("description", models.TextField(default="", max_length=1000)),
                ("weight", models.IntegerField(default=0)),
                ("width", models.IntegerField(default=0)),
                ("depth", models.IntegerField(default=0)),
                ("height", models.IntegerField(default=0)),
                ("price", models.IntegerField(default=0)),
                (
                    "categories",
                    models.CharField(
                        max_length=200,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("brand_id", models.IntegerField(default=0)),
                ("tax_class_id", models.IntegerField(default=0)),
                ("open_graph_type", models.CharField(default="", max_length=200)),
                ("open_graph_title", models.CharField(default="", max_length=200)),
                (
                    "open_graph_description",
                    models.CharField(default="", max_length=200),
                ),
                ("open_graph_use_meta_description", models.BooleanField(default=False)),
                ("open_graph_use_product_name", models.BooleanField(default=False)),
                ("open_graph_use_image", models.BooleanField(default=False)),
                ("is_free_shipping", models.BooleanField(default=False)),
                ("is_visibleb", models.BooleanField(default=False)),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "related_products",
                    models.CharField(
                        max_length=200,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("search_keywords", models.CharField(default="", max_length=200)),
                ("images", models.JSONField(default={})),
                ("videos", models.JSONField(default={})),
                ("layout_file", models.CharField(default="", max_length=200)),
                ("total_sold", models.IntegerField(default=0)),
                ("view_count", models.IntegerField(default=0)),
                ("reviews_count", models.IntegerField(default=0)),
                ("custom_fields", models.JSONField(default={})),
                ("bulk_pricing_rules", models.JSONField(default={})),
            ],
            options={
                "verbose_name": "product",
                "verbose_name_plural": "products",
                "db_table": "product",
            },
        ),
    ]
